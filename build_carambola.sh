#!/bin/sh

# noworld nokernel noports

# Assumes we are sitting in ~/build, run as scripts/
set -e
X_SELF_DIR=`pwd`
FWB=${X_SELF_DIR}/freebsd-wifi-build

# Interestingly it is possible to build -CURRENT kernel with -RELEASE userspace, awesome!
SOURCES_KERNEL=${SOURCES:-${X_SELF_DIR}/freebsd-git}
SOURCES=${SOURCES:-${X_SELF_DIR}/freebsd-release-10.1.0}
#SOURCES_KERNEL=${SOURCES}@Steph_Philbrick that happens to me at work

export X_BUILDASUSER=YES
export X_SKIP_MORE_STUFF=YES
export X_FORCE_TFTPCP=YES

# Deps: gmake bison dialog4ports git wget subversion fakeroot lzma uboot-mkimage libtool
# Optional deps: vim screen less tcpdump
# Deps: bash xorg urwfonts xdm openbox gedit
# Later optional deps: gcc48

# pkg install gcc48 to try out later
# mkdir portsnap ports
# portsnap -d portsnap fetch
# portsnap -p ports extract
# I might use git annex locally to manage downloads
INSTALL_PROG=install

if [ "x$1" = "xclean" ] ; then
  rm -rf obj root mfsroot* tmp
  scripts/clean_ports.sh
  exit 0
fi

# WARNING: bsdbox is not building in -CURRENT at the moment

OPT_WORLD=yes
OPT_KERNEL=yes
OPT_PORTS=yes
OPT_DIST=yes
while [ "x$1" != "x" ]; do
  if [ "x$1" = "xnoworld" ] ; then OPT_WORLD=no ; shift ; fi
  if [ "x$1" = "xnokernel" ] ; then OPT_KERNEL=no ; shift ; fi
  if [ "x$1" = "xnoports" ] ; then OPT_PORTS=no ; shift ; fi
  if [ "x$1" = "xnodist" ] ; then OPT_DIST=no ; shift ; fi
done

if [ $OPT_WORLD = yes ] ; then
  cd ${SOURCES}
  ${FWB}/build/bin/build carambola2  buildworld
fi

if [ $OPT_KERNEL = yes ] ; then
  cd ${SOURCES_KERNEL}
  if [ $OPT_WORLD = yes ] ; then
    if [ "${SOURCES_KERNEL}" != "${SOURCES}" ] ; then
      ${FWB}/build/bin/build carambola2  buildworld
    fi
  fi
  ${FWB}/build/bin/build carambola2  buildkernel
fi

X_STAGING_FSROOT=${X_SELF_DIR}/mfsroot/carambola2
X_DESTDIR=${X_SELF_DIR}/root/mips

DOWNLOADS=${X_SELF_DIR}/ports-distfiles
X_PORTS=${X_SELF_DIR}/ports
X_PORTSBUILD=${X_SELF_DIR}/ports-build


# TODO: od vi not ee
PACKAGES="\
${X_PORTS}/sysutils/less \
${X_PORTS}/net-mgmt/libsmi \
${X_PORTS}/net/libpcap \
${X_PORTS}/net/tcpdump \
${X_PORTS}/net/dhcpcd \
${X_PORTS}/net/netcat \
${X_PORTS}/net/rsync"

# rsync needs scp ...

# We need fakeroot for `mtree`
# PORTSDIR=${X_PORTS}                                   # <-- ./ports           <-- generated by portsnap
# DISTDIR=${DOWNLOADS}                                  # <-- ./ports-distfiles <-- downloaded sources
# PORT_DBDIR=${X_PORTSBUILD}/db                         # <-- ./ports-build/db  <-- config
# WRKDIR=${X_PORTSBUILD}/w/$PACKAGE/work                # <-- ./ports-build/w/$PACKAGE/work
# STAGEDIR=${X_PORTSBUILD}/staging                      # <-- ./ports-build/staging
# PREFIX=/install                                       # <-- ./ports-build/staging/install/
# INSTALL_AS_USER=yes                                   # <-- required to build as normal user
# TARGET=mips TARGET_ARCH=mips TARGET_CPUTYPE=mips32
# NO_DEPENDS=1 NO_PKG_REGISTER=1 DB_FROM_SRC=1          # <-- depends check looks for libs.so's in wrong place
#
# Each port:                                              <-- ./ports-build/work/sysutils/less-458 (etc)
# We needed fakeroot for `mtree` even before we used it everywhere

X_FROM=${X_PORTSBUILD}/staging/install

# This might not work in all cases, especially if SOURCES is a relative path
CROSS=${X_SELF_DIR}/obj/mips/mips.mips/${SOURCES}/tmp/usr/bin

cd ${X_SELF_DIR}
mkdir -p ${X_FROM}
if [ $OPT_PORTS = yes ] ; then
  for p in $PACKAGES ; do
    WORKING=`dirname $p`
    WORKING=`basename $WORKING`/`basename $p`
    cd $p                                                             
    fakeroot make PORTSDIR=${X_PORTS} \
                __MAKE_CONF=${X_SELF_DIR}/root/make.conf.mips DISABLE_MAKE_JOBS=yes \
                DISTDIR=${DOWNLOADS} \
                PORT_DBDIR=${X_PORTSBUILD}/db \
                WRKDIR=${X_PORTSBUILD}/w/${WORKING}/work \
                STAGEDIR=${X_PORTSBUILD}/staging \
                PREFIX=/install \
                INSTALL_AS_USER=yes \
                TARGET=mips \
                TARGET_ARCH=mips \
                TARGET_CPUTYPE=mips32 \
                NO_DEPENDS=1 NO_PKG_REGISTER=1 DB_FROM_SRC=1 \
                BUILD_FLAGS=NO_CLEAN=1 \
                -DDISABLE_VULNERABILITIES \
                  configure
    PATH=${CROSS}:${PATH} fakeroot make PORTSDIR=${X_PORTS} \
                __MAKE_CONF=${X_SELF_DIR}/root/make.conf.mips DISABLE_MAKE_JOBS=yes \
                DISTDIR=${DOWNLOADS} \
                PORT_DBDIR=${X_PORTSBUILD}/db \
                WRKDIR=${X_PORTSBUILD}/w/${WORKING}/work \
                STAGEDIR=${X_PORTSBUILD}/staging \
                PREFIX=/install \
                INSTALL_AS_USER=yes \
                TARGET=mips \
                TARGET_ARCH=mips \
                TARGET_CPUTYPE=mips32 \
                NO_DEPENDS=1 NO_PKG_REGISTER=1 DB_FROM_SRC=1 \
                BUILD_FLAGS=NO_CLEAN=1 \
                -DDISABLE_VULNERABILITIES \
                  install
  done
fi

if [ $OPT_WORLD = yes ] ; then
  cd ${SOURCES}
  ${FWB}/build/bin/build carambola2  installworld
fi
if [ $OPT_KERNEL = yes ] ; then
  cd ${SOURCES_KERNEL}
  ${FWB}/build/bin/build carambola2  installkernel
fi
if [ $OPT_DIST = yes ] ; then
  cd ${SOURCES}
  ${FWB}/build/bin/build carambola2  distribution
fi

cd ${X_SELF_DIR}
rm -rf mfsroot

cd ${SOURCES}
fakeroot ${FWB}/build/bin/build carambola2 mfsroot || true


#INSTALL_PROG="fakeroot install -p -s " 
# install is stupid it wont copy a symlink as a symlink
INSTALL_PROG="fakeroot cp -fPRpv "
${INSTALL_PROG} ${X_SELF_DIR}/scripts/files/rc.conf ${X_STAGING_FSROOT}/c/etc/cfg/

# Features:
# less vi pf pw dhclient dhcpcd ldd netcat scp rsync tcpdump

# Bugs:
# arge0/1 switched instead of routed when both arge0 and arge1 enabled
# extra GPIO pins
# spurious warnings in /etc/rc:
#    Nov 22 03:55:33 init: login_getclass: unknown class 'daemon'
#    sysctl: unknown oid 'dev.ath.1.txq_mcastq_maxdepth': No such file or directory
#    /etc/rc.d/base/net: /etc/rc.d/net/: Permission denied
# password login.conf
# serial terminal locked at 25 high in minicom
#

# ${INSTALL_PROG} ${X_DESTDIR}/sbin/bsdbox ${X_STAGING_FSROOT}/bin/
${INSTALL_PROG} ${X_DESTDIR}/bin/kill ${X_STAGING_FSROOT}/sbin/
${INSTALL_PROG} ${X_DESTDIR}/bin/date ${X_STAGING_FSROOT}/bin/
${INSTALL_PROG} ${X_DESTDIR}/sbin/sha1 ${X_STAGING_FSROOT}/sbin/
${INSTALL_PROG} ${X_DESTDIR}/sbin/sha256 ${X_STAGING_FSROOT}/sbin/
${INSTALL_PROG} ${X_DESTDIR}/sbin/sha512 ${X_STAGING_FSROOT}/sbin/

if [ $OPT_PORTS = yes ] ; then
	${INSTALL_PROG} ${X_FROM}/bin/less ${X_STAGING_FSROOT}/bin/
	${INSTALL_PROG} ${X_DESTDIR}/lib/libncurses.so* ${X_STAGING_FSROOT}/lib/
	${INSTALL_PROG} ${X_DESTDIR}/usr/bin/vi ${X_STAGING_FSROOT}/usr/bin/
fi

${INSTALL_PROG} ${X_DESTDIR}/sbin/pfctl ${X_STAGING_FSROOT}/sbin/
${INSTALL_PROG} ${X_DESTDIR}/sbin/pflogd ${X_STAGING_FSROOT}/sbin/

if [ $OPT_PORTS = yes ] ; then
	${INSTALL_PROG} ${X_DESTDIR}/sbin/dhclient ${X_STAGING_FSROOT}/sbin/
	${INSTALL_PROG} ${X_DESTDIR}/usr/sbin/pw ${X_STAGING_FSROOT}/usr/sbin/
	${INSTALL_PROG} ${X_DESTDIR}/etc/rc.d/dhclient ${X_STAGING_FSROOT}/c/etc/rc.d/

	${INSTALL_PROG} ${X_FROM}/sbin/dhcpcd ${X_STAGING_FSROOT}/sbin/
	${INSTALL_PROG} ${X_FROM}/etc/rc.d/dhcpcd ${X_STAGING_FSROOT}/c/etc/
	${INSTALL_PROG} ${X_FROM}/etc/dhcpcd.conf.sample ${X_STAGING_FSROOT}/c/etc/dhcpcd.conf
	${INSTALL_PROG} ${X_FROM}/libexec/dhcpcd-run-hooks ${X_STAGING_FSROOT}/libexec/
	fakeroot install -d ${X_STAGING_FSROOT}/libexec/dhcpcd-hooks/
	${INSTALL_PROG} ${X_FROM}/libexec/dhcpcd-hooks/* ${X_STAGING_FSROOT}/libexec/dhcpcd-hooks/

	${INSTALL_PROG} ${X_SELF_DIR}/scripts/files/dhcpcd.conf ${X_STAGING_FSROOT}/c/etc/
fi

${INSTALL_PROG} ${X_DESTDIR}/usr/bin/ldd ${X_STAGING_FSROOT}/usr/bin/

if [ $OPT_PORTS = yes ] ; then
	${INSTALL_PROG} ${X_FROM}/bin/netcat ${X_STAGING_FSROOT}/sbin/
fi

if [ $OPT_PORTS = yes ] ; then
	fakeroot install -d ${X_STAGING_FSROOT}/usr/lib/private/
	${INSTALL_PROG} ${X_DESTDIR}/usr/lib/private/libssh.so* ${X_STAGING_FSROOT}/usr/lib/private/
	${INSTALL_PROG} ${X_DESTDIR}/usr/lib/private/libldns.so* ${X_STAGING_FSROOT}/usr/lib/private/
	${INSTALL_PROG} ${X_DESTDIR}/usr/bin/scp ${X_STAGING_FSROOT}/usr/bin/
	${INSTALL_PROG} ${X_FROM}/bin/rsync ${X_STAGING_FSROOT}/sbin/

	${INSTALL_PROG} ${X_FROM}/sbin/tcpdump ${X_STAGING_FSROOT}/sbin/
	${INSTALL_PROG} ${X_FROM}/lib/libsmi.so* ${X_STAGING_FSROOT}/lib/
	${INSTALL_PROG} ${X_FROM}/lib/libpcap.so* ${X_STAGING_FSROOT}/lib/      # <-- Note, also in the base as libcpap.so.8  so whats the diff?
fi

# Disable telnetd
sed -e '/^telnet/d' -i "" ${X_STAGING_FSROOT}/c/etc/inetd.conf
rm ${X_STAGING_FSROOT}/usr/libexec/telnetd

# Testing stuff I was playing around with to get a restricted login.conf working
if false ; then
fakeroot pwd_mkdb -d ${X_STAGING_FSROOT}/c/etc ${X_STAGING_FSROOT}/c/etc/master.passwd
echo root | fakeroot pw -V ${X_STAGING_FSROOT}/c/etc usermod root -h0 -c 'Here\ Lies\ Root' -C ${X_STAGING_FSROOT}/c/etc/pw.conf
echo user | fakeroot pw -V ${X_STAGING_FSROOT}/c/etc usermod user -h0 -c -C ${X_STAGING_FSROOT}/c/etc/pw.conf
rm ${X_STAGING_FSROOT}/c/etc/spwd.db ${X_STAGING_FSROOT}/c/etc/pwd.db
${INSTALL_PROG} scripts/files/login.conf ${X_STAGING_FSROOT}/c/etc/
# WE NEED vt100 in login.conf or cant login!
sed -e '/^exit 0/d' -i "" ${X_STAGING_FSROOT}/c/etc/rc2
echo 'pw usershow root' >> ${X_STAGING_FSROOT}/c/etc/rc2
echo 'pw usershow user' >> ${X_STAGING_FSROOT}/c/etc/rc2
echo 'ls -l /etc' >> ${X_STAGING_FSROOT}/c/etc/rc2
echo 'exit 0' >> ${X_STAGING_FSROOT}/c/etc/rc2
fi
# fakeroot find ${X_STAGING_FSROOT} -ls

cd ${SOURCES}
fakeroot ${FWB}/build/bin/build carambola2 fsimage
${FWB}/build/bin/build carambola2 uboot

# Build a combined flash image. Kernel is first 2MB followed by compressed mfs image
X_FLASH=/tftpboot/kernel.CARAMBOLA2.lzma.flash
dd if=/dev/zero bs=$(( 0x200000 )) count=1 of=${X_FLASH}
dd if=/tftpboot/kernel.CARAMBOLA2.lzma.uImage of=${X_FLASH} conv=notrunc
dd if=/tftpboot/mfsroot-carambola2.img.ulzma >> ${X_FLASH}

ls -l ${X_FLASH}

